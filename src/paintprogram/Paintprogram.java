/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintprogram;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 * Main program to draw shapes when mouse is dragged and clicked.
 * Saves shapes in a specific vector
 * @author Dave
 */
public class Paintprogram extends javax.swing.JFrame {

    /**
     * Creates new form Paintprogram
     */
    
    private Color colorChoice;
    String shapeChoice;
    private int posX;
    private int posY;
    private boolean drag = false;
    private int shapeLenght;
    private int shapeWidth;
    Vector<Ritobject> shapeVec;
    Vector<Integer> punktVec;
    
    private int oldX;
    private int oldY;
    private int currentX;
    private int currentY;
    private int brushSize;
    BufferedImage oldImage;
    Rectangle currentRec;
    public boolean newShape = false;
    Timer timer;
    private Image buf;
    
    public Paintprogram() {
        initComponents();
        startGUI();
        this.setVisible(true);
    }
    /**
     * Synchronized function to retrieve shapes.
     * Not used..
     * @return 
     */
    public synchronized Vector<Ritobject> getShapes() {
        
        
            while (shapeVec.isEmpty()) {
                try {
                    wait();
                    System.out.println("Väntar på ritning..");
                }
                catch (InterruptedException ie) {
                    System.err.print(ie.getMessage());
                }
            }
        notify();
        return shapeVec;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGreen = new javax.swing.JPanel();
        panelBlue = new javax.swing.JPanel();
        panelBlack = new javax.swing.JPanel();
        panelRed = new javax.swing.JPanel();
        panelYellow = new javax.swing.JPanel();
        cmbxVal = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        lblKordinater = new javax.swing.JLabel();
        lblXY = new javax.swing.JLabel();
        lblFargval = new javax.swing.JLabel();
        panelFargval = new javax.swing.JPanel();
        paintPanel = new javax.swing.JPanel();
        cmbxBrush = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelGreen.setBackground(new java.awt.Color(0, 153, 51));
        panelGreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelGreenMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelGreenLayout = new javax.swing.GroupLayout(panelGreen);
        panelGreen.setLayout(panelGreenLayout);
        panelGreenLayout.setHorizontalGroup(
            panelGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelGreenLayout.setVerticalGroup(
            panelGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelBlue.setBackground(new java.awt.Color(0, 51, 255));
        panelBlue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelBlueMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelBlueLayout = new javax.swing.GroupLayout(panelBlue);
        panelBlue.setLayout(panelBlueLayout);
        panelBlueLayout.setHorizontalGroup(
            panelBlueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelBlueLayout.setVerticalGroup(
            panelBlueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelBlack.setBackground(new java.awt.Color(0, 0, 0));
        panelBlack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelBlackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelBlackLayout = new javax.swing.GroupLayout(panelBlack);
        panelBlack.setLayout(panelBlackLayout);
        panelBlackLayout.setHorizontalGroup(
            panelBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelBlackLayout.setVerticalGroup(
            panelBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelRed.setBackground(new java.awt.Color(204, 0, 0));
        panelRed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelRedMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelRedLayout = new javax.swing.GroupLayout(panelRed);
        panelRed.setLayout(panelRedLayout);
        panelRedLayout.setHorizontalGroup(
            panelRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelRedLayout.setVerticalGroup(
            panelRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelYellow.setBackground(new java.awt.Color(255, 255, 102));
        panelYellow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelYellowMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelYellowLayout = new javax.swing.GroupLayout(panelYellow);
        panelYellow.setLayout(panelYellowLayout);
        panelYellowLayout.setHorizontalGroup(
            panelYellowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelYellowLayout.setVerticalGroup(
            panelYellowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cmbxVal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));

        lblKordinater.setText("Koordinater:");

        lblXY.setText("lblXY");

        lblFargval.setText("Färgval:");

        javax.swing.GroupLayout panelFargvalLayout = new javax.swing.GroupLayout(panelFargval);
        panelFargval.setLayout(panelFargvalLayout);
        panelFargvalLayout.setHorizontalGroup(
            panelFargvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
        );
        panelFargvalLayout.setVerticalGroup(
            panelFargvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblKordinater)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblXY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 567, Short.MAX_VALUE)
                .addComponent(lblFargval)
                .addGap(51, 51, 51)
                .addComponent(panelFargval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKordinater)
                    .addComponent(lblXY)
                    .addComponent(lblFargval))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panelFargval, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        paintPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                paintPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                paintPanelMouseMoved(evt);
            }
        });
        paintPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paintPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paintPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paintPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout paintPanelLayout = new javax.swing.GroupLayout(paintPanel);
        paintPanel.setLayout(paintPanelLayout);
        paintPanelLayout.setHorizontalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paintPanelLayout.setVerticalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        cmbxBrush.setToolTipText("Bursh size");
        cmbxBrush.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxBrushItemStateChanged(evt);
            }
        });
        cmbxBrush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxBrushActionPerformed(evt);
            }
        });

        jMenu1.setText("Arkiv");

        menuNew.setText("Nytt");
        jMenu1.add(menuNew);

        menuExit.setText("Avsluta");
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelGreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBlue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBlack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelYellow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbxVal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbxBrush, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelGreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBlue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBlack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelYellow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbxVal, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbxBrush, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        cmbxBrush.getAccessibleContext().setAccessibleDescription("Brush size");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Sets panel colors
     * @param evt 
     */
    private void panelGreenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelGreenMouseClicked
        panelFargval.setBackground(new java.awt.Color(0, 153, 51));
        
        
    }//GEN-LAST:event_panelGreenMouseClicked

    private void panelBlueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBlueMouseClicked
        panelFargval.setBackground(new java.awt.Color(0, 51, 255));
    }//GEN-LAST:event_panelBlueMouseClicked

    private void panelBlackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBlackMouseClicked
        panelFargval.setBackground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_panelBlackMouseClicked

    private void panelRedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRedMouseClicked
        panelFargval.setBackground(new java.awt.Color(204, 0, 0));
    }//GEN-LAST:event_panelRedMouseClicked

    private void panelYellowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelYellowMouseClicked
    
       panelFargval.setBackground(new java.awt.Color(255, 255, 102));
    }//GEN-LAST:event_panelYellowMouseClicked

    
    
    
    /**
     * Function used to repaint graphics when mouse is dragged.
     * Loops through vector of objects and draws in the shape object
     * currently looped.
     */
    private void paintOld()  {
       Graphics2D paintG = (Graphics2D)paintPanel.getGraphics();      
       //Graphics2D gfx = oldImage.createGraphics();
       
       System.out.println("Shape vector elements: " + shapeVec.size());
       
       //colorChoice = panelFargval.getBackground();
       
       if(!shapeVec.isEmpty()) {
           for (Ritobject shape : shapeVec) {
               Color currColor = shape.getColor();
               paintG.setColor(currColor);
               //paintPanel.add(shape);
               //shape.repaint();              
               
               
               shape.Draw(paintG);
               
               
           }
       }

    }
    
    private void paintPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseClicked
       
        
    }//GEN-LAST:event_paintPanelMouseClicked
    /**
     * Retrieve and set pointer info in field when mouse is moved
     * over paintpanel (JPanel)
     * @param evt 
     */
    private void paintPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseMoved
        PointerInfo a = MouseInfo.getPointerInfo();
        Point b = a.getLocation();
        int posXm = (int) b.getX();
        int posYm = (int) b.getY();
        
        lblXY.setText("" + posXm + "," + posYm);        // TODO add your handling code here:
        //newShape = false;
    }//GEN-LAST:event_paintPanelMouseMoved
    /**
     * Main function to draw shapes.
     * Creates a new temporary shape based on selection
     * in combobox. 
     * @param evt 
     */
    private void paintPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseDragged
        
        if(drag) {
        
        int dragX = evt.getX();                         // Used for rectangle and ellipse
        int dragY = evt.getY();
        
        currentX = evt.getX();                          // used for free drawing
        currentY = evt.getY();
        
        shapeLenght = dragX - posX;                     // if user drags shape on the leftside from creation
        if (shapeLenght < 0) {                          // change negative coordinates to positive
            shapeLenght = Math.abs(shapeLenght);
        }
        shapeWidth = dragY - posY;
        if (shapeWidth < 0) {
            shapeWidth = Math.abs(shapeWidth);
        }
        
        Graphics2D gfx = (Graphics2D)paintPanel.getGraphics();                  //Retrieve graphics to draw on paintPanel
        brushSize = Integer.valueOf(cmbxBrush.getSelectedItem().toString());    // Retrieve brushsize from combobox
        
        colorChoice = panelFargval.getBackground();                             // Retrieve color for shape
        shapeChoice = cmbxVal.getSelectedItem().toString();                     // Check which shape should be drawn
        if ("Rektangel".equals(shapeChoice)) {
            currentRec = new Rectangle(shapeLenght, shapeWidth, posX, posY,brushSize);          // Create new Rectangle
            
            try {
                Thread.sleep(70);                                                               // Use sleep to avoid flickering
                gfx.clearRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());             // Clear paintpanel while shape is being drawn
                paintOld();                                                                     // Since screen is cleared, draw current shapes
                gfx.setColor(colorChoice);                                                      // Set color of shape
                currentRec.Draw(gfx);                                                           // Finally draw the rectangle while mouse dragged
                gfx.dispose();
            } catch (InterruptedException ex) {
                Logger.getLogger(Paintprogram.class.getName()).log(Level.SEVERE, null, ex);
            }
            //paintPanel.repaint();
            
            
            
        }
        if ("Cirkel".equals(shapeChoice)) {
            Circle testCircle = new Circle(shapeLenght, shapeWidth, posX, posY,brushSize);      // Create new Circle
            try {
                Thread.sleep(70);
                gfx.clearRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());
                paintOld();
                gfx.setColor(colorChoice);
                testCircle.Draw(gfx);
                gfx.dispose();
                
            } catch (InterruptedException ex) {
                Logger.getLogger(Paintprogram.class.getName()).log(Level.SEVERE, null, ex);
            }
            

        }
        
        if ("Frihand".equals(shapeChoice)) {
            
            Pen testPen = new Pen(oldX, oldY, currentX, currentY,brushSize);            // Create new pen - freehand tool
            testPen.setColor(colorChoice);
            shapeVec.add(testPen);                                                      // No resizing of shape, add the pen directly to vector
            //gfx.clearRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());       // Does not need to clear the screen since added directly
            //paintOld();                                                               // no need to repaint background
            gfx.setColor(colorChoice);
            try {
                Thread.sleep(40);
                
                testPen.Draw(gfx);
            } catch (InterruptedException ex) {
                Logger.getLogger(Paintprogram.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        
            
            oldX = currentX;                                                            // change start / end while drawing
            oldY = currentY;
        }

        lblXY.setText("Dragged mouse" + shapeLenght + "," + shapeWidth);                // Show shape lenght / width
        }
        
        
    }//GEN-LAST:event_paintPanelMouseDragged

      
    
    /**
     * When mouse is pressed, set coordinates
     * and activate 'drag mode'
     * @param evt 
     */
    private void paintPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMousePressed
        posX = evt.getX();
        posY = evt.getY();
        
        oldX = evt.getX();
        oldY = evt.getY();
        
        drag = true;
        
    }//GEN-LAST:event_paintPanelMousePressed
    
    private synchronized void addShapeVec(Ritobject currForm) {
        shapeVec.add(currForm);
        newShape = true;
        notifyAll();
    }
    
    /**
     * When mouse is released, save the shape into
     * shape vector
     * @param evt 
     */
    private void paintPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseReleased
        drag = false;
        
        Graphics2D gfx = (Graphics2D)paintPanel.getGraphics();      
        
        paintOld();
       
        gfx.setColor(colorChoice);
       // gfx.drawLine(posX, posY, posX+10, posY+10);
        
        colorChoice = panelFargval.getBackground();
        if ("Rektangel".equals(shapeChoice)) {
            Rectangle testRect = new Rectangle(shapeLenght, shapeWidth, posX, posY,brushSize);          // Create the shape for storage
            testRect.setColor(colorChoice);                                                             
            //shapeVec.add(testRect);
            addShapeVec(testRect);        }                                                             // Add shape to vector, using abstract base class Ritobject
        if ("Cirkel".equals(shapeChoice)) {
            Circle testCircle = new Circle(shapeLenght, shapeWidth, posX, posY,brushSize);
            testCircle.setColor(colorChoice);
            //shapeVec.add(testCircle);
            addShapeVec(testCircle);
            
        }      
       
        
        
    }//GEN-LAST:event_paintPanelMouseReleased

    private void cmbxBrushItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxBrushItemStateChanged
        if ("Frihand".equals(cmbxVal.getSelectedItem().toString())) {
            cmbxBrush.setVisible(true);
        }
    }//GEN-LAST:event_cmbxBrushItemStateChanged

    private void cmbxBrushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxBrushActionPerformed
        if ("Frihand".equals(cmbxVal.getSelectedItem().toString())) {
            cmbxBrush.setVisible(true);
        }
    }//GEN-LAST:event_cmbxBrushActionPerformed
    
    /**
     * Populate combobox for brushsizes to choose from
     */
    private void brushSelector() {
        cmbxBrush.removeAllItems();
        cmbxBrush.addItem("2");
        cmbxBrush.addItem("5");
        cmbxBrush.addItem("10");
        cmbxBrush.addItem("15");
        cmbxBrush.addItem("20");
        cmbxBrush.addItem("25");
        cmbxBrush.addItem("35");
        cmbxBrush.addItem("40");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paintprogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paintprogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paintprogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paintprogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paintprogram().setVisible(true);
            }
        });
    }
    
    /**
     * Populate comboboxes, initiate vectors, activate menus
     */
    public void startGUI() {
        
        cmbxBrush.setVisible(true);
        cmbxVal.addItem("Rektangel");
        cmbxVal.addItem("Cirkel");
        cmbxVal.addItem("Frihand");
        panelFargval.setBackground(Color.red);
        shapeVec = new Vector<Ritobject>();
        punktVec = new Vector<Integer>();
        brushSelector();
        
        /**
         * Exit application on exit
         */
        menuExit.addActionListener((e) -> {
            System.exit(0);
        });
        
        /**
         * Clear paintpanel and vector of shapes
         */
        menuNew.addActionListener((e) -> {
            Graphics2D gfx = (Graphics2D)paintPanel.getGraphics();
            gfx.clearRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());
            shapeVec.clear();
        });
        
        //oldImage = new BufferedImage(100, 50,BufferedImage.TYPE_INT_ARGB);
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbxBrush;
    private javax.swing.JComboBox<String> cmbxVal;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblFargval;
    private javax.swing.JLabel lblKordinater;
    private javax.swing.JLabel lblXY;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JPanel paintPanel;
    private javax.swing.JPanel panelBlack;
    private javax.swing.JPanel panelBlue;
    private javax.swing.JPanel panelFargval;
    private javax.swing.JPanel panelGreen;
    private javax.swing.JPanel panelRed;
    private javax.swing.JPanel panelYellow;
    // End of variables declaration//GEN-END:variables
}
